cmake_minimum_required (VERSION 3.6.1)
project (BansheeSBGen)

set(CMAKE_CXX_STANDARD 14)
mark_as_advanced(CMAKE_CONFIGURATION_TYPES)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMake/Modules/")

find_package(Clang)

include_directories(${clang_INCLUDE_DIRS})

if(NOT CMAKE_CONFIGURATION_TYPES) # Multiconfig generator?
	if(NOT CMAKE_BUILD_TYPE)
		message(STATUS "Defaulting to release build.")
		set(CMAKE_BUILD_TYPE "Release" CACHE INTERNAL "")
	endif()
endif()

if(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_CXX_COMPILER_ID} MATCHES "GNU" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "AppleClang")
	# Flags are generated by "llvm-config --cxxflags"
	add_compile_options(-fPIC -fvisibility-inlines-hidden -Werror=date-time -Wall -W -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wno-missing-field-initializers -pedantic -fpermissive -Wno-long-long -Wno-maybe-uninitialized -Wdelete-non-virtual-dtor -Wno-comment -g -fno-exceptions -fno-rtti -DLLVM_BUILD_GLOBAL_ISEL -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS)

	if(CMAKE_BUILD_TYPE MATCHES "Release")
		set (CMAKE_EXE_LINKER_FLAGS "-s")
	endif()
endif()

add_executable(BansheeSBGen Source/main.cpp Source/generator.cpp Source/parser.cpp Source/common.h Source/parser.h)
target_link_libraries(BansheeSBGen PUBLIC ${clang_LIBRARIES})

if(WIN32)
	target_link_libraries(BansheeSBGen PUBLIC "version.lib")
elseif(APPLE)
	target_link_libraries(BansheeSBGen PUBLIC curses z m)
elseif(UNIX)
	execute_process(COMMAND ${LLVM_CONFIG} --system-libs --link-static OUTPUT_VARIABLE LLVM_SYSTEM_LIBS)
	string(STRIP ${LLVM_SYSTEM_LIBS} LLVM_SYSTEM_LIBS)
	target_link_libraries(BansheeSBGen PUBLIC ${LLVM_SYSTEM_LIBS})
endif()

install(TARGETS BansheeSBGen 
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib)

if(NOT WIN32)
	install(DIRECTORY ${clang_INSTALL_DIR}/lib/clang/ 
		DESTINATION lib/clang/)
endif()
